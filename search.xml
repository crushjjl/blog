<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[恭喜WE,恭喜RNG]]></title>
    <url>%2F2017%2F10%2F24%2FaboutLol%2F</url>
    <content type="text"><![CDATA[很久没来说说话了，原因了，如下： 一是因为懒懒懒； 二是作者水平在那里，没得啥子有水平的言语和高深的技巧术语给你们； 三则是因为最近忙着追剧（LOL-S7）； 在这里，还是先要恭喜WE！恭喜RNG! 希望可以进一步取得更好的成绩吧！……… 也希望作者可以好好修炼哈自己，写点有营养的东西出来！ “When you’re curious, you find lots of interesting things to do.” 给LPL加油打气哈！！！ （以下图借用于其他平台，侵删！！！） 早点睡觉吧。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>lol</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于浏览器的回流（reflow）和重绘（repaint）]]></title>
    <url>%2F2017%2F09%2F20%2FbrowserRender%2F</url>
    <content type="text"><![CDATA[关于浏览器的回流(reflow）和重绘（repaint） 博文出自于：https://coolshell.cn/articles/9666.html 参考神文：《How Browsers Work》 浏览器的渲染原理简介 在谈到浏览器的回流和重绘的时候，就不得不说到浏览器的渲染原理 浏览器工作大流程 废话少说，先来看个图： 从上面这个图中，我们可以看到那么几个事： 1). 浏览器会解析三个东西： 一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。 CSS，解析CSS会产生CSS规则树。 Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree. 2). 解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。注意： Rendering Tree 渲染树并不等同于DOM树，因为一些像Header或display:none的东西就没必要放在渲染树中了。 CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。 然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。 3）最后通过调用操作系统Native GUI的API绘制。 DOM解析HTML的DOM Tree解析如下：123456789101112&lt;html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Web page parsing&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;h1&gt;Web page parsing&lt;/h1&gt; &lt;p&gt;This is an example Web page.&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 上面这段HTML会解析成这样： 下面是另一个有SVG标签的情况。 CSS解析CSS的解析大概是下面这个样子（下面主要说的是Gecko也就是Firefox的玩法），假设我们有下面的HTML文档：123456789&lt;doc&gt;&lt;title&gt;A few quotes&lt;/title&gt;&lt;para&gt; Franklin said that &lt;quote&gt;&quot;A penny saved is a penny earned.&quot;&lt;/quote&gt;&lt;/para&gt;&lt;para&gt; FDR said &lt;quote&gt;&quot;We have nothing to fear but &lt;span&gt;fear itself.&lt;/span&gt;&quot;&lt;/quote&gt;&lt;/para&gt;&lt;/doc&gt; 于是DOM Tree是这个样子： 然后我们的CSS文档是这样的：1234/* rule 1 */ doc &#123; display: block; text-indent: 1em; &#125;/* rule 2 */ title &#123; display: block; font-size: 3em; &#125;/* rule 3 */ para &#123; display: block; &#125;/* rule 4 */ [class=&quot;emph&quot;] &#123; font-style: italic; &#125; 于是我们的CSS Rule Tree会是这个样子： 注意，图中的第4条规则出现了两次，一次是独立的，一次是在规则3的子结点。所以，我们可以知道，建立CSS Rule Tree是需要比照着DOM Tree来的。CSS匹配DOM Tree主要是从右到左解析CSS的Selector，好多人以为这个事会比较快，其实并不一定。关键还看我们的CSS的Selector怎么写了。 注意：CSS匹配HTML元素是一个相当复杂和有性能问题的事情。所以，你就会在N多地方看到很多人都告诉你，DOM树要小，CSS尽量用id和class，千万不要过渡层叠下去，…… 通过这两个树，我们可以得到一个叫Style Context Tree，也就是下面这样（把CSS Rule结点Attach到DOM Tree上）： 所以，Firefox基本上来说是通过CSS 解析 生成 CSS Rule Tree，然后，通过比对DOM生成Style Context Tree，然后Firefox通过把Style Context Tree和其Render Tree（Frame Tree）关联上，就完成了。注意：Render Tree会把一些不可见的结点去除掉。而Firefox中所谓的Frame就是一个DOM结点，不要被其名字所迷惑了。 注：Webkit不像Firefox要用两个树来干这个，Webkit也有Style对象，它直接把这个Style对象存在了相应的DOM结点上了。 渲染渲染的流程基本上如下（黄色的四个步骤）： 计算CSS样式 构建Render Tree Layout – 定位坐标和大小，是否换行，各种position, overflow, z-index属性 …… 正式开画 注意：上图流程中有很多连接线，这表示了Javascript动态修改了DOM属性或是CSS属会导致重新Layout，有些改变不会，就是那些指到天上的箭头，比如，修改后的CSS rule没有被匹配到，等。 这里重要要说两个概念，一个是Reflow，另一个是Repaint。这两个不是一回事。 Repaint——屏幕的一部分要重画，比如某个CSS的背景色变了。但是元素的几何尺寸没有变。 Reflow——意味着元件的几何尺寸变了，我们需要重新验证并计算Render Tree。是Render Tree的一部分或全部发生了变化。这就是Reflow，或是Layout。（HTML使用的是flow based layout，也就是流式布局，所以，如果某元件的几何尺寸发生了变化，需要重新布局，也就叫reflow）reflow 会从这个root frame开始递归往下，依次计算所有的结点几何尺寸和位置，在reflow过程中，可能会增加一些frame，比如一个文本字符串必需被包装起来。 Reflow的成本比Repaint的成本高得多的多。DOM Tree里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。在一些高性能的电脑上也许还没什么，但是如果reflow发生在手机上，那么这个过程是非常痛苦和耗电的。 所以，下面这些动作有很大可能会是成本比较高的。 当你增加、删除、修改DOM结点时，会导致Reflow或Repaint 当你移动DOM的位置，或是搞个动画的时候。 当你修改CSS样式的时候。 当你Resize窗口的时候（移动端没有这个问题），或是滚动的时候。 当你修改网页的默认字体时。 注：display:none会触发reflow，而visibility:hidden只会触发repaint，因为没有发现位置变化。 多说两句关于滚屏的事，通常来说，如果在滚屏的时候，我们的页面上的所有的像素都会跟着滚动，那么性能上没什么问题，因为我们的显卡对于这种把全屏像素往上往下移的算法是很快。但是如果你有一个fixed的背景图，或是有些Element不跟着滚动，有些Elment是动画，那么这个滚动的动作对于浏览器来说会是相当相当痛苦的一个过程。你可以看到很多这样的网页在滚动的时候性能有多差。因为滚屏也有可能会造成reflow。 基本上来说，reflow有如下的几个原因： Initial。网页初始化的时候。 Incremental。一些Javascript在操作DOM Tree时。 Resize。其些元件的尺寸变了。 StyleChange。如果CSS的属性发生变化了。 Dirty。几个Incremental的reflow发生在同一个frame的子树上。 好了，我们来看一个示例吧：123456789101112var bstyle = document.body.style; // cache bstyle.padding = &quot;20px&quot;; // reflow, repaintbstyle.border = &quot;10px solid red&quot;; // 再一次的 reflow 和 repaint bstyle.color = &quot;blue&quot;; // repaintbstyle.backgroundColor = &quot;#fad&quot;; // repaint bstyle.fontSize = &quot;2em&quot;; // reflow, repaint // new DOM element - reflow, repaintdocument.body.appendChild(document.createTextNode(&apos;dude!&apos;)); 当然，我们的浏览器是聪明的，它不会像上面那样，你每改一次样式，它就reflow或repaint一次。一般来说，浏览器会把这样的操作积攒一批，然后做一次reflow，这又叫异步reflow或增量异步reflow。但是有些情况浏览器是不会这么做的，比如：resize窗口，改变了页面默认的字体，等。对于这些操作，浏览器会马上进行reflow。 但是有些时候，我们的脚本会阻止浏览器这么干，比如：如果我们请求下面的一些DOM值： offsetTop, offsetLeft, offsetWidth, offsetHeight scrollTop/Left/Width/Height clientTop/Left/Width/Height IE中的 getComputedStyle(), 或 currentStyle 因为，如果我们的程序需要这些值，那么浏览器需要返回最新的值，而这样一样会flush出去一些样式的改变，从而造成频繁的reflow/repaint。 减少reflow/repaint下面是一些Best Practices： 1).不要一条一条地修改DOM的样式。与其这样，还不如预先定义好css的class，然后修改DOM的className。1234567891011// badvar left = 10,top = 10;el.style.left = left + &quot;px&quot;;el.style.top = top + &quot;px&quot;; // Goodel.className += &quot; theclassname&quot;; // Goodel.style.cssText += &quot;; left: &quot; + left + &quot;px; top: &quot; + top + &quot;px;&quot;; 2).把DOM离线后修改。如： 使用documentFragment 对象在内存里操作DOM 先把DOM给display:none(有一次reflow)，然后你想怎么改就怎么改。比如修改100次，然后再把他显示出来。 clone一个DOM结点到内存里，然后想怎么改就怎么改，改完后，和在线的那个的交换一下。 3).不要把DOM结点的属性值放在一个循环里当成循环里的变量。不然这会导致大量地读写这个结点的属性。4).尽可能的修改层级比较低的DOM。当然，改变层级比较底的DOM有可能会造成大面积的reflow，但是也可能影响范围很小。5).为动画的HTML元件使用fixed或absoult的position，那么修改他们的CSS是不会reflow的。6).千万不要使用table布局。因为可能很小的一个小改动会造成整个table的重新布局。 In this manner, the user agent can begin to lay out the table once the entire first row has been received. Cells in subsequent rows do not affect column widths. Any cell that has content that overflows uses the ‘overflow’ property to determine whether to clip the overflow content. Fixed layout, CSS 2.1 Specification This algorithm may be inefficient since it requires the user agent to have access to all the content in the table before determining the final layout and may demand more than one pass. Automatic layout, CSS 2.1 Specification 几个工具和几篇文章有时候，你会也许会发现在IE下，你不知道你修改了什么东西，结果CPU一下子就上去了到100%，然后过了好几秒钟repaint/reflow才完成，这种事情以IE的年代时经常发生。所以，我们需要一些工具帮我们看看我们的代码里有没有什么不合适的东西。 Chrome下，Google的SpeedTracer是个非常强悍的工作让你看看你的浏览渲染的成本有多大。其实Safari和Chrome都可以使用开发者工具里的一个Timeline的东东。 Firefox下这个基于Firebug的叫Firebug Paint Events的插件也不错。 IE下你可以用一个叫dynaTrace的IE扩展。 最后，别忘了下面这几篇提高浏览器性能的文章： Google – Web Performance Best Practices Yahoo – Best Practices for Speeding Up Your Web Site Steve Souders – 14 Rules for Faster-Loading Web Sites 总结：上述关于浏览器渲染原理的简介以及关于浏览器的回流和重绘细节之处需要慢慢去体会。引用此文章仅作为博主学习总结，如发现有任何侵权行为，请立马联系我。 参考：浏览器的渲染原理简介 博主前端小白，才疏学浅，若发现文章有任何不妥的地方，可直接E-mail! “An essential part of creativity is not being afraid to fail.”]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Web</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归]]></title>
    <url>%2F2017%2F09%2F20%2Ffactorial%2F</url>
    <content type="text"><![CDATA[递归浅谈js里面的递归！ 递归函数是在一个函数通过名字调用自身的情况下构成的，示例如下。 12345678function factorial(num)&#123; if(num &lt;= 1)&#123; return 1; &#125;else&#123; return num * factorial(num-1); &#125;&#125;factorial(5); //120 上面的示例是一个经典递归阶乘函数。虽然这个函数表面看起来没什么问题，但是接下来你再看看，看仔细哟。 123var anotherFactorial = factorial; factorial = null; console.log(anotherFactorial(4));//报错！！！ 出错了？是的。 上述代码先把factorial()函数保存在变量anotherfactorial中，然后将factorial变量设置为null，结果指向原始函数的引用只剩下一个。但在接下来调用anotherfactorial()时，由于必须执行factorial(),而factorial已经不再是函数，所以就会导致错误。在这种情况下，怎么解决这个问题呢？使用arguments.callee可以解决这个问题。 我们知道，arguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现对函数的递归调用，例如： 1234567function factorial(num)&#123; if(num &lt;= 1)&#123; return 1; &#125;else&#123; return num * arguments.callee(num-1);//手动加粗 &#125;&#125; 上面手动加粗的代码显示：通过使用arguments.callee代替函数名，可以确保无论怎样调用函数都不会出问题。因此，在编写递归函数时，使用arguments.callee总比使用函数名更保险。 但在严格模式下，不能通过脚本访问arguments.callee，访问这个属性会导致错误。不过，可以使用命名函数表达式来达成相同的效果。例如： 1234567var factorial = (function f(num)&#123; if(num &lt;= 1)&#123; return 1; &#125;else&#123; return num*f(num-1); &#125; &#125;); 通过以上的代码创建了名为f()的命名函数表达式，然后将它赋值给变量factorial。即便把函数复制给了另一个变量，函数的名字f仍然有效，所以递归调用照样能正确的完成。 这种方式在严格模式和非严格模式下都行得通。 总结： 递归： 函数体中调用函数自身–函数自己和自己玩。 “Don’t let yesterday take up too much of today.” 福利 看看别个怎么说的：一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。 不说了，该睡觉了。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Attention]]></title>
    <url>%2F2017%2F09%2F06%2FtestFile%2F</url>
    <content type="text"><![CDATA[本站作者还在探索建设中… 有好东西给你们 常来逛逛 逛到深处会有福利的 ——————–横线————————— 福利 看看别个怎么说的：一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。 不说了，该睡觉了。]]></content>
      <categories>
        <category>解释说明</category>
      </categories>
      <tags>
        <tag>Description</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深夜，恭喜国足]]></title>
    <url>%2F2017%2F08%2F30%2Fsecond%2F</url>
    <content type="text"><![CDATA[恭喜中国足球在俄罗斯世界预选赛赢得一场胜利希望国足可以走得更远– 国足 牛逼！– 又是一个伤心的夜晚– 今天看到了希望– 换来的是绝望– 不是队员不努力– 不是某个队员的失误– 而是从古至今国足经历了多少次黑色三分钟– 我们的球员什么时候才能分析场上形势– 根据形势踢该踢的球– 该往角球带就往角球带– 不行卧草也能拖延时间– 这是整个中国足球教育体系的问题– 一次又一次的伤球迷的心– 虽然下场比赛还是会继续为你们加油– 但国足争气点– 把属于足球的快乐还给中国球迷– 我知道你们也很难受– 但难受有用吗 我们更看重结果– 但就这样的球队进了世界杯又能怎样呢– 晚安吧 明天又是新的一天]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>sports</tag>
      </tags>
  </entry>
</search>
